[{"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/index.js":"1","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/App.js":"2","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/Teams.js":"3","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/Standings.js":"4","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/Home.js":"5","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/appContext.js":"6","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/TeamInfo.js":"7","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/TeamStats.js":"8","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/TeamRoster.js":"9"},{"size":380,"mtime":1612399336952,"results":"10","hashOfConfig":"11"},{"size":1166,"mtime":1612815427510,"results":"12","hashOfConfig":"11"},{"size":786,"mtime":1612835548770,"results":"13","hashOfConfig":"11"},{"size":5264,"mtime":1612595219310,"results":"14","hashOfConfig":"11"},{"size":278,"mtime":1612410915700,"results":"15","hashOfConfig":"11"},{"size":1599,"mtime":1612835764300,"results":"16","hashOfConfig":"11"},{"size":771,"mtime":1612476894380,"results":"17","hashOfConfig":"11"},{"size":890,"mtime":1612476919240,"results":"18","hashOfConfig":"11"},{"size":1435,"mtime":1612578003490,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"87k8g",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/index.js",[],["43","44"],"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/App.js",[],"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/Teams.js",[],"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/Standings.js",["45"],"import React, { useState, useContext } from \"react\"\n\nimport { AppContext } from \"./appContext\"\n\nfunction Standings(props) {\n    const [season, setSeason] = useState(\"\")\n    const [selectedSeason, setSelectedSeason] = useState(\"\")\n    const [searchTeam, setSearchTeam] = useState(\"\")\n    const [foundTeam, setFoundTeam] = useState({ gamesPlayed: 0, points: 0, team: { id: 0, name: \"Empty\", }, leagueRecord: { wins: 0, losses: 0, ties: 0, ot: 0, } })\n    const [showFoundTeam, setShowFoundTeam] = useState(false)\n    /*const [seasonStats, setSeasonStats] = useState([])*/\n\n    const { standings, updateStandings, year } = useContext(AppContext)\n\n    /*setSeasonStats(standings)*/\n\n    function selectSeason() {\n        setSelectedSeason(season)\n        console.log(selectedSeason)\n        setSeason(\"\")\n    }\n\n    function searchFoundTeam() {\n        setSearchTeam(\"\")\n\n        performSearch(searchTeam)\n        setShowFoundTeam(true)\n    }\n\n    function performSearch() {\n        /*console.log(searchTeam)*/\n\n        let sameTeam = mergeArr.find(each => searchTeam === each.team.name)\n\n        if (sameTeam === undefined) {\n            setFoundTeam({ gamesPlayed: 0, points: 0, team: { id: 0, name: \"Empty\", }, leagueRecord: { wins: 0, losses: 0, ties: 0, ot: 0, } })\n        } else {\n            setFoundTeam(sameTeam)\n        }\n\n        /*console.log(sameTeam)*/\n    }\n\n    let newYear = year\n\n    let stringYear = newYear.toString()\n    /*console.log(stringYear)*/\n\n    let stringYearSplit = stringYear.split(\"\")\n    /*console.log(stringYearSplit)*/\n\n    let firstYear = stringYearSplit[0] + stringYearSplit[1] + stringYearSplit[2] + stringYearSplit[3]\n    let secondYear = stringYearSplit[4] + stringYearSplit[5] + stringYearSplit[6] + stringYearSplit[7]\n\n    let combineYear = `${firstYear}-${secondYear}`\n\n    /*console.log(combineYear)*/\n\n    /*console.log(standings)*/\n\n    let newArr = standings.map(function (each) {\n        return (each.teamRecords)\n    })\n\n    /*console.log(newArr)*/\n\n    let mergeArr = [].concat.apply([], newArr)\n\n    /*console.log(mergeArr)*/\n\n    let allTeamStats = mergeArr.map(function (each) {\n        if (typeof each.leagueRecord.ties === \"number\") {\n            return (\n                <div className=\"teamStandingsIndividual\" key={each.team.id}>\n                    <h1 className=\"header\">{each.team.name}</h1>\n                    <p>Games Played: {each.gamesPlayed}</p>\n                    <p>Wins: {each.leagueRecord.wins}</p>\n                    <p>Losses: {each.leagueRecord.losses}</p>\n                    <p>Ties: {each.leagueRecord.ties}</p>\n                    <p>OT Losses: {each.leagueRecord.ot}</p>\n                    <p>Points: {each.points}</p>\n                </div>\n            )\n        } else if (typeof each.leagueRecord.ties !== \"number\") {\n            return (\n                <div className=\"teamStandingsIndividual\" key={each.team.id}>\n                    <h1 className=\"header\">{each.team.name}</h1>\n                    <p>Games Played: {each.gamesPlayed}</p>\n                    <p>Wins: {each.leagueRecord.wins}</p>\n                    <p>Losses: {each.leagueRecord.losses}</p>\n                    <p>OT Losses: {each.leagueRecord.ot}</p>\n                    <p>Points: {each.points}</p>\n                </div>\n            )\n        }\n    })\n\n    return (\n        <div className={\"standingsDiv\"}>\n            <h1 className=\"standingsHeader\">{combineYear} Season Standings</h1>\n            <input\n                type=\"text\"\n                value={season}\n                name=\"season\"\n                placeholder=\"Enter Years Ex 20192020\"\n                onChange={event => setSeason(event.target.value)}\n            />\n            <button onClick={() => { updateStandings(season); selectSeason(); setShowFoundTeam(false) }}>Select Season</button> <br />\n            <div className=\"searchInput\">\n                <input\n                    type=\"text\"\n                    value={searchTeam}\n                    name=\"foundTeam\"\n                    placeholder=\"Name of Team\"\n                    onChange={event => setSearchTeam(event.target.value)}\n                />\n                <button onClick={() => { searchFoundTeam(searchTeam) }}>Search</button>\n            </div>\n\n            <h1 className=\"standingsHeader\">Teams</h1>\n            <div className=\"teamStandingsListDiv\" style={{ display: showFoundTeam ? \"none\" : \"flex\" }}>\n                {allTeamStats}\n            </div>\n            <div className=\"teamStandingsListDiv\" style={{ display: showFoundTeam ? \"flex\" : \"none\" }}>\n                <div className=\"teamStandingsIndividual\" key={foundTeam.team.id}>\n                    <h1 className=\"header\">{foundTeam.team.name}</h1>\n                    <p>Games Played: {foundTeam.gamesPlayed}</p>\n                    <p>Wins: {foundTeam.leagueRecord.wins}</p>\n                    <p>Losses: {foundTeam.leagueRecord.losses}</p>\n                    <p style={{ display: typeof foundTeam.leagueRecord.ties != \"number\" ? \"none\" : \"block\" }}> Ties: {foundTeam.leagueRecord.ties}</p>\n                    <p>OT Losses: {foundTeam.leagueRecord.ot}</p>\n                    <p>Points: {foundTeam.points}</p>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Standings","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/Home.js",["46"],"import React from \"react\"\n\nfunction Home() {\n    return (\n        <div className=\"homeDiv\">\n            <h1>Welcome To A NHL Stats App</h1>\n            <img src=\"https://cms.nhl.bamgrid.com/images/photos/308596228/1024x576/cut.jpg\" />\n        </div>\n    )\n}\n\nexport default Home","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/appContext.js",[],"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/TeamInfo.js",[],"/home/rax/VSchool/Module 4/Assignments/react-api-project/src/TeamStats.js",["47"],"import React, { useState } from \"react\"\n\nimport { useParams } from \"react-router-dom\"\n\nimport axios from \"axios\"\n\nfunction TeamStats() {\n    const { teamId } = useParams()\n\n    const [stats, setStats] = useState([])\n\n    React.useEffect(() => {\n\n        axios.get(`https://statsapi.web.nhl.com/api/v1/teams/${teamId}/stats`)\n            .then(response => setStats(response.data.stats[0].splits[0].stat))\n            .catch(error => console.log(error))\n\n    }, [])\n\n    /*console.log(stats)*/\n\n    return (\n        <div className=\"teamStatsDiv\">\n            <h1 className=\"header\">2020-2021 Season Stats</h1>\n            <p>Games Played: {stats.gamesPlayed}</p>\n            <p>Games Won: {stats.wins}</p>\n            <p>Games Lost: {stats.losses}</p>\n            <p>Overtime Losses: {stats.ot}</p>\n            <p>Total Points: {stats.pts}</p>\n        </div>\n    )\n}\n\nexport default TeamStats","/home/rax/VSchool/Module 4/Assignments/react-api-project/src/TeamRoster.js",["48"],"import React, { useState } from \"react\"\n\nimport { useParams } from \"react-router-dom\"\n\nimport axios from \"axios\"\n\nfunction TeamRoster() {\n    const { teamId } = useParams()\n\n    const [roster, setRoster] = useState([])\n    const [toggle, setToggle] = useState(false)\n\n    React.useEffect(() => {\n\n        axios.get(`https://statsapi.web.nhl.com/api/v1/teams/${teamId}?expand=team.roster`)\n            .then(response => setRoster(response.data.teams[0].roster.roster))\n            .catch(error => console.log(error))\n\n    }, [])\n\n    function toggleHandle() {\n        setToggle(prevToggle => !prevToggle)\n    }\n\n    /*console.log(roster)*/\n\n    let player = roster.map(function (each) {\n        return (\n            <div className=\"singlePlayer\" key={each.person.id}>\n                <h1 className=\"header\">{each.person.fullName} #{each.jerseyNumber}</h1>\n                <p>Position: {each.position.name}</p>\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"teamRosterDiv\">\n            <div className=\"rosterHeaderButtonDiv\">\n                <h1 className=\"header\">Current Team Roster</h1>\n                <button onClick={toggleHandle}>Display Roster</button>\n            </div>\n            <div style={{ display: toggle ? \"block\" : \"none\" }}>\n                <div className=\"playersDiv\">\n                    {player}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TeamRoster",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":71,"column":37,"nodeType":"55","messageId":"56","endLine":71,"endColumn":46},{"ruleId":"57","severity":1,"message":"58","line":7,"column":13,"nodeType":"59","endLine":7,"endColumn":95},{"ruleId":"60","severity":1,"message":"61","line":18,"column":8,"nodeType":"62","endLine":18,"endColumn":10,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"61","line":19,"column":8,"nodeType":"62","endLine":19,"endColumn":10,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'teamId'. Either include it or remove the dependency array.","ArrayExpression",["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"69","fix":"71"},"Update the dependencies array to be: [teamId]",{"range":"72","text":"73"},{"range":"74","text":"73"},[460,462],"[teamId]",[524,526]]