[{"/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/index.js":"1","/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/App.js":"2","/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/Form.js":"3","/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/Ugly.js":"4","/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/uglyContext.js":"5"},{"size":285,"mtime":1611622719949,"results":"6","hashOfConfig":"7"},{"size":306,"mtime":1611623909899,"results":"8","hashOfConfig":"7"},{"size":1823,"mtime":1611814701420,"results":"9","hashOfConfig":"7"},{"size":887,"mtime":1611808989160,"results":"10","hashOfConfig":"7"},{"size":7758,"mtime":1611861860840,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"93hsr4",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/index.js",[],["26","27"],"/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/App.js",[],"/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/Form.js",[],"/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/Ugly.js",["28"],"import React from \"react\"\n\nimport { UglyContextConsumer } from \"./uglyContext\"\n\nfunction Ugly() {\n    return (\n        <UglyContextConsumer>\n            {list => (list.uglyThingsArr.map(each => {\n                return (\n                    <div key={each._id} className=\"uglyImageDiv\">\n                        <p className=\"title\">Title: {each.title}</p>\n                        <img src={each.imgUrl} width=\"500px\" height=\"500px\" />\n                        <p className=\"description\">Description: {each.description}</p>\n                        <button onClick={() => list.deletePost(each._id)}>Delete Post</button>\n                        <button onClick={() => list.editPost(each._id, each.title, each.imgUrl, each.description)}>Edit Post</button>\n                    </div>\n\n                )\n            })\n            )}\n        </UglyContextConsumer>\n    )\n}\n\nexport default Ugly ",["29","30"],"/home/rax/VSchool/Module 4/Assignments/ugly-things-context/src/uglyContext.js",["31","32"],"import React from \"react\"\n\nimport axios from \"axios\"\n\nconst { Provider, Consumer } = React.createContext()\n\nclass UglyContextProvider extends React.Component {\n\n    state = {\n        title: \"\",\n        url: \"\",\n        description: \"\",\n        id: \"\",\n        showForm: false,\n        /*newPost: \"\"*/\n        uglyThingsArr: []\n    }\n\n    componentDidMount() {\n        /*axios.get(\"https://api.vschool.io/alexramirez/thing\")\n            .then(response => this.setState((prevState) => {\n                return {\n                    uglyThingsArr: [...prevState.uglyThingsArr, response.data]\n                }\n            }, function () { console.log(this.state.uglyThingsArr) }))\n            .catch(error => console.log(error))*/\n\n        axios.get(\"https://api.vschool.io/alexramirez/thing\")\n            .then(response => this.setState({\n                uglyThingsArr: response.data\n            }, function () { console.log(this.state.uglyThingsArr) }))\n            .catch(error => console.log(error))\n    }\n\n    fillIn = (event) => {\n        const { name, value } = event.target\n        this.setState({\n            [name]: [value]\n        })\n    }\n\n    submittedInfo = (title, url, description) => {\n        /*this.setState((prevState)=>{\n            return{\n                uglyThingsArr:[...prevState.uglyThingsArr, {title: title, image: image, url: url}]\n            }\n        })*/\n\n        this.setState({\n            title: title,\n            url: url,\n            description: description,\n        }, function () { this.infoPost() })\n\n        /*this.infoIntoArr()*/\n\n        /*let newPost = {\n            title: this.state.title,\n            description: this.state.description,\n            imgUrl: this.state.url\n        }*/\n\n        /*this.infoPost()*/\n    }\n\n    /*infoIntoArr = () => {\n        this.setState((prevState) => {\n            return {\n                uglyThingsArr: [...prevState.uglyThingsArr, { title: prevState.title, url: prevState.url, description: prevState.description }]\n            }\n        })\n        console.log(this.state.uglyThingsArr)\n    }*/\n\n    infoPost = () => {\n        /*this.setState((prevState) => {\n            let newPost = {\n                title: prevState.title,\n                description: prevState.description,\n                imgUrl: prevState.url\n            }\n            return {\n                title: \"\",\n                description: \"\",\n                imgUrl: \"\",\n                newPost: newPost\n            }\n        })*/\n\n        let newPost = {\n            title: this.state.title,\n            description: this.state.description,\n            imgUrl: this.state.url\n        }\n\n        console.log(newPost)\n\n        /*axios.post(\"https://api.vschool.io/alexramirez/thing\", newPost)\n            .then(response => console.log(response.data), this.update())\n            .catch(error => console.log(error))*/\n\n        axios.post(\"https://api.vschool.io/alexramirez/thing\", newPost)\n            .then(response => this.setState((prevState) => {\n                return {\n                    uglyThingsArr: [...prevState.uglyThingsArr, response.data]\n                }\n            }))\n            .catch(error => console.log(error))\n\n        /*axios.get(\"https://api.vschool.io/alexramirez/thing\")\n            .then(response => this.setState((prevState) => {\n                return {\n                    uglyThingsArr: [...prevState.uglyThingsArr, response.data]\n                }\n            }))\n            .catch(error => console.log(error))*/\n\n        /*axios.get(\"https://api.vschool.io/alexramirez/thing\")\n            .then(response => this.setState({\n                uglyThingsArr: response.data\n            }), window.location.reload())\n            .catch(error => console.log(error))\n\n        console.log(this.state.uglyThingsArr)*/\n    }\n\n    deletePost = (id) => {\n        console.log(id)\n\n        this.setState((prevState) => {\n            let newArr = prevState.uglyThingsArr.filter(each => {\n                if (each._id !== id) {\n                    return true\n                } else if (each._id === id) {\n                    return false\n                }\n            })\n            return {\n                uglyThingsArr: newArr\n            }\n        })\n\n        axios.delete(`https://api.vschool.io/alexramirez/thing/${id}`)\n            .then(response => console.log(response.data))\n            .catch(error => console.log(error))\n\n    }\n\n    editPost = (id, title, imgUrl, description) => {\n        console.log(id)\n\n        this.setState({\n            title: title,\n            url: imgUrl,\n            description: description,\n            id: id,\n            showForm: true\n        }, function () { console.log(this.state.title, this.state.url, this.state.description) })\n    }\n\n    submitEdit = () => {\n        let editPost = {\n            title: this.state.title,\n            description: this.state.description,\n            imgUrl: this.state.url\n        }\n\n        let id = this.state.id\n\n        this.setState((prevState) => {\n            let editArr = prevState.uglyThingsArr.map(function (each) {\n                if (each._id === id) {\n                    return {\n                        ...each,\n                        title: prevState.title,\n                        description: prevState.description,\n                        imgUrl: prevState.url\n                    }\n                } else if (each._id !== id) {\n                    return {\n                        ...each\n                    }\n                }\n            })\n            return {\n                title: \"\",\n                url: \"\",\n                description: \"\",\n                id: \"\",\n                showForm: false,\n                uglyThingsArr: editArr\n            }\n        })\n\n        axios.put(`https://api.vschool.io/alexramirez/thing/${id}`, editPost)\n            .then(response => console.log(response.data))\n            .catch(error => console.log(error))\n\n        /*this.setState({\n            title: \"\",\n            url: \"\",\n            description: \"\",\n            id: \"\",\n            showForm: false\n        })*/\n    }\n\n    render() {\n\n        return (\n            <Provider value={{\n                uglyThingsArr: this.state.uglyThingsArr,\n                submittedInfo: this.submittedInfo,\n                deletePost: this.deletePost,\n                editPost: this.editPost\n            }}>\n                {this.props.children}\n                <div className=\"editFormDiv\">\n                    <form style={{ display: this.state.showForm ? \"block\" : \"none\" }}>\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            placeHolder=\"Image Title\"\n                            value={this.state.title}\n                            onChange={this.fillIn}\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"url\"\n                            placeHolder=\"Image Url\"\n                            value={this.state.url}\n                            onChange={this.fillIn}\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"description\"\n                            placeHolder=\"Description\"\n                            value={this.state.description}\n                            onChange={this.fillIn}\n                        />\n                    </form>\n                    <button className=\"editButton\" style={{ display: this.state.showForm ? \"block\" : \"none\" }} onClick={this.submitEdit}>Submit Edit</button>\n                </div>\n            </Provider>\n        )\n    }\n}\n\nexport { UglyContextProvider, Consumer as UglyContextConsumer }",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":12,"column":25,"nodeType":"39","endLine":12,"endColumn":79},{"ruleId":"33","replacedBy":"40"},{"ruleId":"35","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":131,"column":62,"nodeType":"44","messageId":"45","endLine":131,"endColumn":64},{"ruleId":"42","severity":1,"message":"46","line":171,"column":55,"nodeType":"47","messageId":"45","endLine":171,"endColumn":64},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["48"],["49"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","no-global-assign","no-unsafe-negation"]